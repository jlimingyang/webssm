<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd

	 http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

	<context:component-scan base-package="com.item1024">
		<context:exclude-filter type="annotation"
		expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 配置master数据源 -->
	<bean name="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${master_db_url}"/>
		<property name="username" value="${master_db_user}"/>
		<property name="password" value="${master_db_password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲  maxIdle is deprecated 报错注释-->
		<!-- <property name="maxIdle" value="20" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 连接长期不使用时，连接池会自动从数据库中断开该连接，
			等再次使用时再尝试连接，这个语句就是在断开重连时做检测的 -->
		<property name="validationQuery" value="${master_validationQuery}" />
		<!-- 在进行borrowObject进行处理时，对拿到的connection进行validateObject校验 -->
		<property name="testOnBorrow" value="false" />
		<!-- 在进行returnObject对返回的connection进行validateObject校验 -->
		<property name="testOnReturn" value="false" />

		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 连接泄漏的超时时间1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!--<property name="filters" value="mergeStat" />-->
        <property name="filters" value="stat,log4j" />
	</bean>

	<!-- 配置slave数据源 -->
	<bean name="readDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${slave_db_url}"/>
		<property name="username" value="${slave_db_user}"/>
		<property name="password" value="${slave_db_password}"/>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最大空闲  maxIdle is deprecated 报错注释-->
		<!-- <property name="maxIdle" value="20" /> -->
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- 连接长期不使用时，连接池会自动从数据库中断开该连接，
			等再次使用时再尝试连接，这个语句就是在断开重连时做检测的 -->
		<property name="validationQuery" value="${slave_validationQuery}" />
		<!-- 在进行borrowObject进行处理时，对拿到的connection进行validateObject校验 -->
		<property name="testOnBorrow" value="false" />
		<!-- 在进行returnObject对返回的connection进行validateObject校验 -->
		<property name="testOnReturn" value="false" />

		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 连接泄漏的超时时间1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<!--<property name="filters" value="mergeStat" />-->
		<property name="filters" value="stat,log4j" />
	</bean>


	<!--数据源-->
	<bean id="dataSource" class="com.item1024.Configs.ChooseDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- write -->
				<entry key="write" value-ref="writeDataSource"/>
				<!-- read -->
				<entry key="read" value-ref="readDataSource"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="readDataSource"/>

	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
		<!--配置全局配置文件-->
		<property name="configLocation" value="classpath:mybatis-Config.xml"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- mapper接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.item1024.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

	<!-- 为业务逻辑层的方法解析@DataSource注解  为当前线程的routeholder注入数据源key -->
	<bean id="dataSourceAspect" class="com.item1024.aspect.DataSourceAspect" />
	<aop:config proxy-target-class="true">
		<aop:aspect id="dataSourceAspect" ref="dataSourceAspect" order="1">
			<aop:pointcut id="tx" expression="execution(* com.item1024.service..*.*(..)) "/>
			<aop:before pointcut-ref="tx" method="before" />
		</aop:aspect>
	</aop:config>



</beans>



